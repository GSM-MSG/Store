{"interfaceLanguages":{"swift":[{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/store\/store\/action","title":"Action","type":"associatedtype"},{"path":"\/documentation\/store\/store\/mutation","title":"Mutation","type":"associatedtype"},{"path":"\/documentation\/store\/store\/state-swift.associatedtype","title":"State","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/store\/store\/currentstate-28ezp","title":"var currentState: State","type":"property"}],"title":"Store Implementations","type":"groupMarker"}],"path":"\/documentation\/store\/store\/currentstate-8qi59","title":"var currentState: State","type":"property"},{"path":"\/documentation\/store\/store\/initialstate","title":"var initialState: State","type":"property"},{"children":[{"children":[{"path":"\/documentation\/store\/store\/state-swift.property-64c94","title":"var state: AnyPublisher<State, Never>","type":"property"}],"title":"Store Implementations","type":"groupMarker"}],"path":"\/documentation\/store\/store\/state-swift.property-5whu5","title":"var state: AnyPublisher<State, Never>","type":"property"},{"path":"\/documentation\/store\/store\/statesubject","title":"var stateSubject: CurrentValueSubject<State, Never>","type":"property"},{"path":"\/documentation\/store\/store\/subscription","title":"var subscription: Set<AnyCancellable>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/store\/store\/mutate(state:action:)","title":"func mutate(state: State, action: Action) -> SideEffect<Mutation, Never>","type":"method"},{"path":"\/documentation\/store\/store\/reduce(state:mutate:)","title":"func reduce(state: State, mutate: Mutation) -> State","type":"method"},{"children":[{"children":[{"path":"\/documentation\/store\/store\/send(_:)-6eoux","title":"func send(Action)","type":"method"}],"title":"Store Implementations","type":"groupMarker"}],"path":"\/documentation\/store\/store\/send(_:)-3s51s","title":"func send(Action)","type":"method"}],"path":"\/documentation\/store\/store","title":"Store","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/store\/sideeffect\/init(_:)","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/store\/sideeffect\/init(error:)","title":"init(error: Failure)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/store\/sideeffect\/upstream","title":"let upstream: AnyPublisher<Output, Failure>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/store\/sideeffect\/catchandreturn(_:)","title":"func catchAndReturn(Output) -> SideEffect<Output, Never>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/catchmap(_:)","title":"func catchMap((Failure) -> Output) -> SideEffect<Output, Never>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/catchtonever()","title":"func catchToNever() -> SideEffect<Output, Never>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/map(_:)-piyr","title":"func map<T>((Output) -> T) -> SideEffect<T, Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/store\/sideeffect\/none","title":"static var none: SideEffect","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/store\/sideeffect\/async(priority:operation:)","title":"static func async(priority: TaskPriority?, operation: () async -> Output) -> SideEffect<Output, Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/concat(_:)-7kiz0","title":"static func concat<C>(C) -> SideEffect<Output, Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/concat(_:)-9gqo1","title":"static func concat(SideEffect...) -> SideEffect<Output, Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/future(_:)","title":"static func future(((Result<Output, Failure>) -> Void) -> Void) -> SideEffect<Output, Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/just(_:)","title":"static func just(Output) -> SideEffect<Output, Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/merge(_:)-1lwjl","title":"static func merge<S>(S) -> SideEffect<Output, Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/merge(_:)-4jkhq","title":"static func merge(SideEffect...) -> SideEffect<Output, Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/tryasync(priority:operation:)","title":"static func tryAsync(priority: TaskPriority?, operation: () async throws -> Output) -> SideEffect<Output, Error>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/store\/sideeffect\/values-1s9ht","title":"var values: AsyncPublisher<Self>","type":"property"},{"path":"\/documentation\/store\/sideeffect\/values-3d94z","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/store\/sideeffect\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/store\/sideeffect\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/store\/sideeffect\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/combinelatest(_:_:)-41nyr","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/combinelatest(_:_:)-9tzn9","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/combinelatest(_:_:_:)-2vfpw","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/combinelatest(_:_:_:)-7nuqk","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/erasetosideeffect()","title":"func eraseToSideEffect() -> SideEffect<Output, Failure>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/flatmap(maxpublishers:_:)-10fi7","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/flatmap(maxpublishers:_:)-43e1x","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/flatmap(maxpublishers:_:)-4vm3g","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/flatmap(maxpublishers:_:)-4x579","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/map(_:)-56xlc","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/map(_:)-7phhk","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/max()","title":"func max() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/min()","title":"func min() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/store\/sideeffect\/sink(receivevalue:)","title":"func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/store\/sideeffect\/subscribe(_:)-29u3y","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/store\/sideeffect\/subscribe(_:)-6lcqs","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/store\/sideeffect\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/switchtolatest()","title":"func switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/zip(_:_:)-2qay7","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/zip(_:_:)-8yvdp","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/zip(_:_:_:)-2lmz2","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/zip(_:_:_:)-m80v","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/store\/sideeffect\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/store\/sideeffect\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/store\/sideeffect","title":"SideEffect","type":"struct"}],"path":"\/documentation\/store","title":"Store","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}